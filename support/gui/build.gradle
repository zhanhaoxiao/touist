buildscript {
    repositories{
        jcenter()
        maven { url "https://mini2dx.org/maven/content/repositories/thirdparty" }
        maven { url "https://mini2dx.org/maven/content/repositories/releases" }
    }
    dependencies {
        classpath group: 'org.mini2Dx', name: 'parcl', version: '1.2.1'
    }
}
plugins {
    id 'edu.sc.seis.macAppBundle' version '2.2.1' // For TouIST.app on macOS
    id 'edu.sc.seis.launch4j' version '2.3.0' // For TouIST.exe on Windows
    id 'com.palantir.git-version' version '0.8.0'
    id 'com.github.johnrengelman.shadow' version '2.0.1' // For building the 'fat-jar' touist.jar that includes deps
    id 'com.google.osdetector' version '1.4.0'
    id 'eclipse'
    id 'idea'
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'edu.sc.seis.launch4j'
apply plugin: 'com.google.osdetector'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: "org.mini2Dx.parcl"
apply plugin: 'eclipse'

description = 'A friendly language for propositional logic and more'
group = 'org.irit'
sourceCompatibility = 1.9
version gitVersion()
mainClassName = 'touist.TouIST'
applicationName = project.name
applicationDefaultJvmArgs = [
        "-Dtouist.externalRelativeDir=../../../external",
        "-Dtouist.saveRelativeDir=../../../"
]

task prepareExternal(type: Copy) {
    outputs.dir file("external")
    from ("../../_build/default/src/main.exe") {
        rename 'main.exe','touist'
    }
    from ('external') {
        include 'minisat.jar'
    }
    into "${buildDir}/external/"
}
run.dependsOn prepareExternal

// NOTE: don't forget to update if necessary 'modules-info.java'.
//     jdeps --generate-module-info resources/jlink touist
task customJre() {
    dependsOn shadowJar
    dependsOn prepareExternal
    def customJreOutput = file("$buildDir/custom-jre")
    def jdk9Home = "${System.getProperty('java.home')}"
    def module = 'touist'
    outputs.dir customJreOutput
    inputs.dir file("resources/jlink/touist/module-info.java")
    doFirst {
        copy {
            from shadowJar.outputs.files
            into "$buildDir/shadowjar"
        }
        copy {
            shadowJar.outputs.files.each { from(zipTree(it)) }
            into "$buildDir/shadowjar-unzipped"
        }
        exec {
            executable = "javac"
            args = ["-p", module, "-d", "$buildDir/shadowjar-unzipped", "resources/jlink/touist/module-info.java"]
            logger.lifecycle commandLine.join(' ')
        }
        exec {
            executable = "jar"
            args = ["uf", "$buildDir/shadowjar/touist.jar", "-C", "$buildDir/shadowjar-unzipped", "module-info.class"]
            logger.lifecycle commandLine.join(' ')
        }
    }
    doLast {
        delete customJreOutput
        exec {
            executable "${jdk9Home}/bin/jlink"
            args = ['--module-path', (["$jdk9Home/jmods"] + "$buildDir/shadowjar/touist.jar").grep().join(File.pathSeparator),
                    '--add-modules', module,
                    '--output', customJreOutput,
                    '--compress=2', '--strip-debug', "--no-man-pages", "--no-header-files"
            ]
            logger.lifecycle commandLine.join(' ')
        }
        if(osdetector.os == 'windows') {
            def f = file "${customJreOutput}/touist.bat"
            f.text = '''
            set DIRNAME=%~dp0
            if "%DIRNAME%" == "" set DIRNAME=.
            if not "%DIRNAME:~-1%"=="\\" set "DIRNAME=%DIRNAME%\\"
            "%DIRNAME%\\bin\\java.exe" -Dtouist.dir="%DIRNAME%" -Dtouist.externalRelativeDir=./external -Dtouist.saveRelativeDir=. -m touist/touist.TouIST %*
            '''.stripIndent()
        } else {
            def f = file "${customJreOutput}/touist"
            f.text = '''
            #! /bin/sh
            "$(dirname "$0")"/bin/java -Dtouist.dir="$(dirname "$0")" -Dtouist.externalRelativeDir=./external -Dtouist.saveRelativeDir=. -m touist/touist.TouIST $@
            '''.stripIndent()
        }
    }
}

task compressCustomJre(type: Zip, dependsOn: customJre) {
    destinationDir file("build/distributions")
    archiveName "${project.name}-jar-with-jre-${project.version}.zip"
    from(customJre) {
        exclude "legal"
        exclude "release"
    }
}
build.dependsOn compressCustomJre


task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
}

tasks.withType(JavaCompile) {
    sourceCompatibility=project.sourceCompatibility
}

task generateVersion {
    inputs.property("version", project.version) // regenerate if project.version changes
    doLast {
        def props = new Properties()
        props.setProperty("touist.version", project.version)
        props.setProperty("touist.description", project.description)
        props.setProperty("touist.buildTimestamp", new Date().toString())
        //props.setProperty("touist.externalRelativeDir","../../../external")
        //props.setProperty("touist.saveRelativeDir","../../../")
        props.setProperty("apple.laf.useScreenMenuBar","true")
        props.setProperty("com.apple.macos.use-file-dialog-packages","true")
        props.setProperty("com.apple.macos.useScreenMenuBar","true")
        props.setProperty("com.apple.mrj.application.apple.menu.about.name","${project.name}")
        props.setProperty("com.apple.smallTabs","true")
        props.setProperty("apple.eawt.quitStrategy", "CLOSE_ALL_WINDOWS")
        props.setProperty("file.encoding","UTF-8")
        file("resources/version.properties").withPrintWriter { props.list(it) }
    }
}
compileJava.dependsOn generateVersion

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
            exclude '**/launch4j','**/macappbundle'
        }
    }
}

dependencies {
    compile 'com.fifesoft:rsyntaxtextarea:2.6.1'
    compile 'org.scilab.forge:jlatexmath:1.0.6'
    compile 'org.kordamp.ikonli:ikonli-swing:1.9.0'
    compile 'org.kordamp.ikonli:ikonli-fontawesome-pack:1.9.0'
    runtime files('.')
}

jar {
    baseName = 'touist'
    manifest {
        // WARNING: do not remove the '.' from the classpath. If you do,
        // there will be a nullPointerException because we use getResource(".")
        attributes 'Class-Path': '.'
    }
}

shadowJar {
    mergeServiceFiles()
    baseName = 'touist'
    classifier = null
    version = null
    configurations = [project.configurations.compile]
    manifest {
        // WARNING: do not remove the '.' from the classpath. If you do,
        // there will be a nullPointerException because we use getResource(".")
        attributes 'Class-Path': '.'
    }
}

startScripts {
    doLast {
        if(osdetector.os == 'windows') delete unixScript
        else delete windowsScript
    }
}

distributions {
    main {
        contents {
            into ('lib') {
                from (prepareExternal)
            }
//            into ('bin') {
//                from (myStartScripts)
//                if(osdetector.os == 'windows') include '*.bat'
//                else exclude '*.bat'
//                fileMode = 0755
//            }
        }
    }
}
//startScripts.enabled false

// // Using './gradlew -Ddebug=true createApp' we debug remotely TouIST.app
// if (System.getProperty('debug', 'false') == 'true') {
//     javaExtras.put('-agentlib:jdwp','transport=dt_socket,server=y,suspend=n,address=5005')
//     javaProperties.put("debug", "true")
// }

// See the build.gradle at https://github.com/laccore/coretools
import groovy.xml.MarkupBuilder
task generateMacFiles() {
    file("$buildDir/tmp").mkdirs()
    def (infoplist, pkginfo) = [file("$buildDir/tmp/Info.plist"), file("$buildDir/tmp/PkgInfo")]
    [infoplist, pkginfo].each {outputs.dir it}
    pkginfo.text = "APPL????"
    def writer = new BufferedWriter(new FileWriter(infoplist))
    def xml = new MarkupBuilder(writer)
    def doValue
    doValue = { value -> switch (value) {
        case String: xml.string("$value"); break
        case List: xml.array { value.each { v -> doValue(v) }}; break
        case Map:xml.dict { value.each { k, v -> key("$k"); doValue(v) }}; break
        case Object[]: xml.dict { value.each { k, v -> key("$k"); doValue(v) }}; break
        default: logger.error("unknown type for plist: "+value)
    }}
    writer.writeLine('<?xml version="1.0" encoding="UTF-8"?>')
    writer.writeLine('<!DOCTYPE plist SYSTEM "file://localhost/System/Library/DTDs/PropertyList.dtd">')
    writer.writeLine('<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">')
    xml.plist(version:"1.0") {
        dict {[
            CFBundleDevelopmentRegion: 'English',
            CFBundleInfoDictionaryVersion: '6.0',
            CFBundlePackageType: 'APPL',
            CFBundleExecutable: 'TouIST',
            CFBundleIconFile: 'logo.icns',
            CFBundleIdentifier: 'touist.TouIST',
            CFBundleName: 'TouIST',
            CFBundleVersion: project.version,
            CFBundleShortVersionString: project.version,
            CFBundleAllowMixedLocalizations: 'false',
            NSHighResolutionCapable: 'true',
            CFBundleSignature: '????',
            CFBundleDocumentTypes: [[
                CFBundleTypeExtensions: [ 'touist','touistl' ],
                CFBundleTypeIconFile: 'logo.icns',
                CFBundleTypeName: project.name + ' source file',
                CFBundleTypeRole: 'Editor',
                LSHandlerRank: 'Owner'
            ]]].each { k,v -> key("$k"); doValue(v) }
        }
    }
    writer.close()
}

task mac() {
    def app = file("$buildDir/mac/TouIST.app")
    dependsOn generateMacFiles
    dependsOn customJre
    dependsOn prepareExternal
    outputs.dir app
    doLast {
        app.mkdirs()
        copy {
            from(generateMacFiles)
            into file("$app/Contents")
        }
        copy {
            from(customJre)
            into file("$app/Contents/Java")
            exclude "legal", "release"
        }
        copy {
            from prepareExternal
            into file("$app/Contents/Java")
        }
        copy {
            from("resources/macappbundle/logo.icns")
            into file("$app/Contents/Resources")
        }
        file("$app/Contents/MacOS").mkdirs()
        def f = file("$app/Contents/MacOS/TouIST")
        f.text = '''#! /bin/sh
            "$(dirname "$0")"/../Java/bin/java -Xdock:name=TouIST -Dtouist.dir="$(dirname "$0")/../Java" -Dtouist.externalRelativeDir=./external -Dtouist.saveRelativeDir=../../.. -m touist/touist.TouIST $@
        '''.stripIndent()
        exec {
                commandLine "chmod", "+x", "$f"
        }
        exec {
            commandLine "codesign", "-s", "-", "--force", "$app"
            logger.lifecycle commandLine.join(' ')
        }
    }
}

task warningMac() {
    mkdir 'build/tmp'
    def f = file "build/tmp/TouIST-OPENING.txt"
    outputs.dir f
    f.text =
"""On macOS Sierra (10.12) and later macOS versions, opening TouIST will
show the error:

    TouIST is damaged and can’t be opened. You should move it to the Trash.

This is because we did not pay Apple \$99 for signing TouIST.app. One easy way
of fixing this is to enable the opening of applications coming from 'anywhere':

    sudo spctl --master-disable

This fix is the only way to go on macOS Sierra. On previous versions, you can
alternatively go to

    System Preferences > Security > unlock the lock
                       > Authorize applications downloaded from > anywhere
Sorry for the inconvenience!
"""
}
// This task will simpy copy 'touist', 'minisat.jar' and any other external binary to
// the newly created TouIST.app
// Copied from the build.gradle of https://github.com/crashinvaders/gdx-texture-packer-gui/
task copyToMacAppBundle (type: Copy) {
    into '.'
    from (files(prepareExternal)) {
        into "build/${macAppBundle.appOutputDir}/TouIST.app/Contents/external"
    }
}
createApp.dependsOn copyToMacAppBundle

task createMacAppZip(type: Zip) {
    dependsOn createApp
    destinationDir file("build/distributions")
    archiveName "${project.name}-native-${project.version}.zip"
    from("${buildDir}/${macAppBundle.appOutputDir}") {
        include "${project.name}.app/**"
        exclude "${project.name}.app/Contents/MacOS"
    }
    from("${buildDir}/${macAppBundle.appOutputDir}") {
        include "${project.name}.app/Contents/MacOS/**"
        fileMode 0777  // octal requires leading zero
    }
    from warningMac
}

task copyToWindowsBundle (type: Copy) {
    from (files(prepareExternal))
    into "build/${launch4j.outputDir}/${launch4j.libraryDir}/external"
}

createExe {
    mainClassName = project.mainClassName
    icon = "${project.rootDir}/resources/launch4j/logo.ico"
    jreMinVersion = "${project.sourceCompatibility}.0"
    version = version
    textVersion = version
    companyName = 'IRIT'
    copyright = '2017 (C) IRIT'
    jvmOptions = [
            //'-Dswing.defaultlaf=javax.swing.plaf.nimbus.NimbusLookAndFeel',
            '-Dtouist.externalRelativeDir=lib/external',
            '-Dtouist.saveRelativeDir=.',
    ]
    fileDescription = project.description
    productName = project.name
    copyConfigurable = shadowJar.outputs.files
    jar = "lib/${shadowJar.archiveName}"
    finalizedBy copyToWindowsBundle
    // bundledJrePath = '' -> IF I WANT TO BUNDLE THE JRE
}

task createExeZip(type: Zip) {
    dependsOn createExe
    from "build/${launch4j.outputDir}"
    include '*'
    include '*/*'
    include '*/*/*'
    archiveName "${project.name}-native-${project.version}.zip"
    destinationDir file('build/distributions')
}

task createJarZip(type: Zip) {
    dependsOn shadowJar
    from shadowJar
    from (files(prepareExternal)) { into 'external' }
    archiveName "${project.name}-jar-${project.version}.zip"
    destinationDir file('build/distributions')
}

parcl {
    exe {
        exeName = "TouIST"
        // icon = "${project.rootDir}/resources/launch4j/logo.ico"
        // withJre("%\...")
    }
    app {
        appName = "TouIST"
        icon = 'resources/macappbundle/logo.icns'
        applicationCategory = "public.app-category.adventure-games"
        displayName = 'My Application'
        identifier = 'com.example.my.apple.identifier'
        copyright = 'Copyright 2015 Your Name Here'
        //withJre("")
    }
    linux {
        binName = "TouIST"
        //withJre("")
    }
}
createDmg.enabled = false
distTar.enabled = false
distZip.enabled = false
shadowDistTar.enabled = false
shadowDistZip.enabled = false